Transform: "AWS::Serverless-2016-10-31"
Description: "
  Create Environment to trigger BAM
  - an lambda trigger on buckets
  - an lambda trigger on api gateway with apikey
  "
Globals:
  Function:
    Timeout: 15

Parameters:
  Cust:
    Type: String
    Description: Name of the CustLComer Uppercase
  Env:
    Type: String
    Description: EnvLC to deploy Uppercase
  EnvLC:
    Type: String
    Description: EnvLC to deploy Lowercase
  CustLC:
    Type: String
    Description: Name of the CustLComer Lowercase
  Repo:
    Type: String
    Description: Name of the repo CodeCommit BAM (must be in the aws account target)
    Default: PierreCourteilleWebsite
  Token:
    Type: String
    Description: Name of the branch for the Repo BAM
  Branch:
    Type: String
    Default: master
    Description: Name of the branch for the Repo BAM
  ApplicationName:
    Type: String
    Description: Name of the repo CodeCommit BAM (must be in the aws account target)
    Default: wspc

Resources:

  ApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties: 
      ParentId: !GetAtt 
        - ApiGateway
        - RootResourceId
      PathPart: send_email
      RestApiId: !Ref ApiGateway
  
  # EmptyModel:
  #   Type: AWS::ApiGateway::Model
  #   Properties: 
  #     ContentType: application/json
  #     Name: EmptyModel
  #     RestApiId: !Ref ApiGateway
  #     Schema: 
  #       "$schema": http://json-schema.org/draft-04/schema#
  #       title: Empty Schema
  #       type: object

  ApiGatewayMethodOPTIONS:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{"statusCode": 200}'
        IntegrationHttpMethod: OPTIONS
        IntegrationResponses: 
          - StatusCode: 200
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'" 
              method.response.header.Access-Control-Allow-Methods: "'POST,OPTIONS'" 
              method.response.header.Access-Control-Allow-Origin: "'*'" 
            ResponseTemplates:
              application/json: ''
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaEmail.Arn}/invocations
      # RequestModels: 
      #   application/json: Empty
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters: 
            method.response.header.Access-Control-Allow-Headers: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Origin: true
  
  ApiGatewayMethodPOST:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref ApiGateway
      ResourceId: !Ref ApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        IntegrationResponses: 
          - StatusCode: 200
            ResponseParameters: 
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: ''
        Uri: !Sub >-
          arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaEmail.Arn}/invocations
      MethodResponses:
        - StatusCode: 200
          ResponseModels:
            application/json: Empty
          ResponseParameters: 
              method.response.header.Access-Control-Allow-Origin: true
  
  ApiGtwStage:
    Type: AWS::ApiGateway::Stage
    Properties:
      DeploymentId: !Ref ApiGtwDeployment
      Description: Prod Stage
      RestApiId: !Ref ApiGateway
      StageName: prod

  ApiGtwDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn: 
      - ApiGatewayMethodPOST
      - ApiGatewayMethodOPTIONS
    Properties: 
      Description: New stage
      RestApiId: !Ref ApiGateway

  ApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name:
        Fn::Join:
          - "-"
          -
            - !Ref CustLC
            - !Ref EnvLC
            - "send"
            - "email"
            - "apigw"
      EndpointConfiguration:
        Types: 
          - REGIONAL 
  
  BucketWebsitePolicy:
    Type: AWS::S3::BucketPolicy
    Properties: 
      Bucket: !Ref BucketWebsite
      PolicyDocument: 
        Version: 2012-10-17
        Statement:
          - Action:
              - 's3:GetObject'
            Effect: Allow
            Resource: !Join
              - ''
              - - 'arn:aws:s3:::'
                - !Ref BucketWebsite
                - /*
            Principal: '*'

  BucketWebsite:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      BucketName: piercuta.com
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      # PublicAccessBlockConfiguration:
        # BlockPublicAcls: false
        # BlockPublicPolicy: false
        # IgnorePublicAcls: false
        # RestrictPublicBuckets: false

  ArtifactBucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: Delete
    Properties:
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      # PublicAccessBlockConfiguration:
        # BlockPublicAcls: false
        # BlockPublicPolicy: false
        # IgnorePublicAcls: false
        # RestrictPublicBuckets: false

  LambdaEmailRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
            Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSLambdaExecute
        - arn:aws:iam::aws:policy/AmazonSESFullAccess
      RoleName:
        Fn::Join:
          - "-"
          -
            - !Ref CustLC
            - !Ref EnvLC
            - "lambda"
            - "email"
            - "role"

  LambdaPermissionEmail:
    Type: AWS::Lambda::Permission
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaEmail
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGateway}/*/POST/send_email

  LambdaEmail:
    # SAM resource to create a Lambda function
    Type: "AWS::Serverless::Function"
    Properties:
      Runtime: nodejs14.x
      CodeUri: send_email
      Handler: index.handler
      Timeout: 4
      Role: !GetAtt LambdaEmailRole.Arn
  
  CodeBuildRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:  !Sub ${CustLC}-${EnvLC}-${ApplicationName}-code-build-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codebuild.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Path: /
      Tags: 
        - Key: Env
          Value: !Ref Env

  CodeBuild:
    Type: 'AWS::CodeBuild::Project'
    Properties:
      Name: !Sub ${CustLC}-${EnvLC}-${ApplicationName}-code-build-project
      Description: A description about my project
      LogsConfig:
        CloudWatchLogs: 
          Status: DISABLED 
      ServiceRole: !GetAtt 
        - CodeBuildRole
        - Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/amazonlinux2-x86_64-standard:3.0'
        EnvironmentVariables:
          - Name: httpEmail
            Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod/send_email"
            Type: PLAINTEXT
      Source:
        Type: CODEPIPELINE
      Tags: 
        - Key: Env
          Value: !Ref Env
  
  Secret:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: 'Token for accessing github repo'
      Name:
        !Sub
          - 'github_token_${client}_${Environment}_${application_name}'
          - { client: !Ref CustLC , Environment: !Ref EnvLC, application_name: !Ref ApplicationName }
      SecretString: 
        !Sub
          - '{"github_access_token_${client}_${Environment}_${application_name}": "${token}"}'
          - { client: !Ref CustLC, Environment: !Ref EnvLC, application_name: !Ref ApplicationName, token: !Ref Token } 
      Tags: 
        - Key: Env
          Value: !Ref Env
  
  CodePipelineRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName:  !Sub ${CustLC}-${EnvLC}-${ApplicationName}-code-pipeline-role
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Action:
              - 'sts:AssumeRole'
            Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AdministratorAccess'
      Path: /
      Tags: 
        - Key: Env
          Value: !Ref Env
  
  CodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    DependsOn: Secret
    Properties:
      # Name: !Sub ${Client}-${EnvLC}-${ApplicationName}-code-pipeline
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: S3
      RoleArn: !GetAtt 
        - CodePipelineRole
        - Arn
      RestartExecutionOnUpdate: true
      Stages:
        - Actions:
            - Name: SourceAction
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceArtifact
              Configuration:
                Owner: Piercuta
                Repo: !Ref Repo
                Branch: !Ref Branch
                OAuthToken: 
                    !Sub
                      - '{{resolve:secretsmanager:github_token_${client}_${Environment}_${application_name}:SecretString:github_access_token_${client}_${Environment}_${application_name}}}'
                      - { client: !Ref CustLC, Environment: !Ref EnvLC, application_name: !Ref ApplicationName }
                PollForSourceChanges: false
              RunOrder: 1
          Name: SOURCE
        - Name: Build
          Actions:
            - Name: BuildAction
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceArtifact
              OutputArtifacts:
                - Name: BuildArtifact
              Configuration:
                ProjectName: !Ref CodeBuild
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: DeployAction
              InputArtifacts:
                - Name: BuildArtifact
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: '1'
                Provider: S3
              Configuration:
                BucketName: !Ref BucketWebsite
                Extract: true
              RunOrder: 1
      Tags: 
        - Key: Env
          Value: !Ref Env